@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@inject IPlaylistService playListService;
@inject IArtistService artistService;

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <div class="row">
        <div class="col-md-12">
            <div style="text-align: right">
                <input type="text" id="NewPlaylist" @bind="searchText" @bind:event="oninput" class="form-control" style="display: inline-block !important; width:300px;margin-bottom:0px" placeholder="Type to search the artist">
            </div>
            <div style ="text-align: right">
                <span class="text-muted ml-5">
                    Showing @filteredArtists.Count out of @Artists.Count
                </span>
            </div>
        </div>
    </div>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in filteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    private string CurrentUserId;
    private Modal PlaylistDialog { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private string searchText = "";
    private List<Artist> filteredArtists => Artists.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList();



    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
    }

    public async Task<List<Artist>> GetArtists()
    {
        return await artistService.GetAllArtistsAsync();
    }

    private void OpenPlaylistDialog()
    {
        PlaylistDialog.Open();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }
}
